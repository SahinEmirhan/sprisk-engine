memberSearchIndex = [{"p":"io.github.sahinemirhan.starter.annotation","c":"RiskCheck","l":"action()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"action()"},{"p":"io.github.sahinemirhan.starter.storage","c":"InMemoryRiskStorage","l":"addMemberToSet(String, String)","u":"addMemberToSet(java.lang.String,java.lang.String)"},{"p":"io.github.sahinemirhan.starter.storage","c":"RedisRiskStorage","l":"addMemberToSet(String, String)","u":"addMemberToSet(java.lang.String,java.lang.String)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Status","l":"ALLOW"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome","l":"allow()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver.Builder","l":"attempt(CompositeUserIdResolver.Extractor)","u":"attempt(io.github.sahinemirhan.starter.resolver.CompositeUserIdResolver.Extractor)"},{"p":"io.github.sahinemirhan.starter.annotation","c":"RiskCheck","l":"attributes()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"attributes()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Status","l":"BLOCK"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome","l":"block()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockContext","l":"BlockContext(RiskResult, String, HardRuleEvaluator.HardRuleHit, HttpServletRequest, ChallengePolicy)","u":"%3Cinit%3E(io.github.sahinemirhan.core.model.RiskResult,java.lang.String,io.github.sahinemirhan.starter.rules.HardRuleEvaluator.HardRuleHit,jakarta.servlet.http.HttpServletRequest,io.github.sahinemirhan.starter.challenge.ChallengePolicy)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"blockHandler()"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"bruteForceRule(WindowManager, BruteForceRuleProperties)","u":"bruteForceRule(io.github.sahinemirhan.core.window.WindowManager,io.github.sahinemirhan.starter.config.rule.BruteForceRuleProperties)"},{"p":"io.github.sahinemirhan.starter.rules","c":"BruteForceRule","l":"BruteForceRule(WindowManager, long, long, int, boolean)","u":"%3Cinit%3E(io.github.sahinemirhan.core.window.WindowManager,long,long,int,boolean)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"BruteForceRuleProperties","l":"BruteForceRuleProperties()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Builder","l":"build()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver.Builder","l":"build()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocationFactory","l":"build(ProceedingJoinPoint, HttpServletRequest, RiskConfiguration)","u":"build(org.aspectj.lang.ProceedingJoinPoint,jakarta.servlet.http.HttpServletRequest,io.github.sahinemirhan.starter.aop.internal.RiskConfiguration)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver","l":"builder()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Status","l":"CHALLENGE"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome","l":"challenge()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"ChallengeContext(RiskResult, Decision, String, HardRuleEvaluator.HardRuleHit, HttpServletRequest, ChallengePolicy)","u":"%3Cinit%3E(io.github.sahinemirhan.core.model.RiskResult,io.github.sahinemirhan.core.model.Decision,java.lang.String,io.github.sahinemirhan.starter.rules.HardRuleEvaluator.HardRuleHit,jakarta.servlet.http.HttpServletRequest,io.github.sahinemirhan.starter.challenge.ChallengePolicy)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeEvent","l":"ChallengeEvent(ChallengeContext, long)","u":"%3Cinit%3E(io.github.sahinemirhan.starter.challenge.ChallengeContext,long)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"challengeHandler(ChallengeTelemetry)","u":"challengeHandler(io.github.sahinemirhan.starter.challenge.ChallengeTelemetry)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"ChallengePolicy(Duration, Duration, Duration, int, boolean)","u":"%3Cinit%3E(java.time.Duration,java.time.Duration,java.time.Duration,int,boolean)"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"ChallengePolicyProperties()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"challengePolicyStrategy(ChallengePolicyProperties)","u":"challengePolicyStrategy(io.github.sahinemirhan.starter.config.ChallengePolicyProperties)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"challengeTelemetry(ApplicationEventPublisher)","u":"challengeTelemetry(org.springframework.context.ApplicationEventPublisher)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeTelemetry","l":"ChallengeTelemetry(ApplicationEventPublisher)","u":"%3Cinit%3E(org.springframework.context.ApplicationEventPublisher)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"challengeTtl()"},{"p":"io.github.sahinemirhan.starter.rules","c":"BruteForceRule","l":"code()"},{"p":"io.github.sahinemirhan.starter.rules","c":"CredentialStuffingRule","l":"code()"},{"p":"io.github.sahinemirhan.starter.rules","c":"IpVelocityRule","l":"code()"},{"p":"io.github.sahinemirhan.starter.rules","c":"NightTimeRule","l":"code()"},{"p":"io.github.sahinemirhan.starter.rules","c":"UserVelocityRule","l":"code()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeEvent","l":"context()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"contextSupplier()"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"credentialStuffingRule(WindowManager, CredentialStuffingRuleProperties)","u":"credentialStuffingRule(io.github.sahinemirhan.core.window.WindowManager,io.github.sahinemirhan.starter.config.rule.CredentialStuffingRuleProperties)"},{"p":"io.github.sahinemirhan.starter.rules","c":"CredentialStuffingRule","l":"CredentialStuffingRule(WindowManager, long, long, int, boolean)","u":"%3Cinit%3E(io.github.sahinemirhan.core.window.WindowManager,long,long,int,boolean)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"CredentialStuffingRuleProperties","l":"CredentialStuffingRuleProperties()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"decision()"},{"p":"io.github.sahinemirhan.starter.rules","c":"HardRuleEvaluator.HardRuleHit","l":"decision()"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"decisionProfile(SpriskProperties)","u":"decisionProfile(io.github.sahinemirhan.starter.config.SpriskProperties)"},{"p":"io.github.sahinemirhan.starter.rules","c":"BruteForceRule","l":"defaultEnabled()"},{"p":"io.github.sahinemirhan.starter.rules","c":"CredentialStuffingRule","l":"defaultEnabled()"},{"p":"io.github.sahinemirhan.starter.rules","c":"IpVelocityRule","l":"defaultEnabled()"},{"p":"io.github.sahinemirhan.starter.rules","c":"NightTimeRule","l":"defaultEnabled()"},{"p":"io.github.sahinemirhan.starter.rules","c":"UserVelocityRule","l":"defaultEnabled()"},{"p":"io.github.sahinemirhan.starter.rules","c":"NightTimeRule","l":"describeConfiguration()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RuleOverrideSet","l":"empty()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RuleOverrideSet","l":"enabled()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockContext","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeEvent","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"UserIdResolverContext","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.rules","c":"HardRuleEvaluator.HardRuleHit","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"escalationThreshold()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskEvaluationProcessor","l":"evaluate(ProceedingJoinPoint, RiskInvocation)","u":"evaluate(org.aspectj.lang.ProceedingJoinPoint,io.github.sahinemirhan.starter.aop.internal.RiskInvocation)"},{"p":"io.github.sahinemirhan.starter.rules","c":"BruteForceRule","l":"evaluate(RiskContext)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext)"},{"p":"io.github.sahinemirhan.starter.rules","c":"CredentialStuffingRule","l":"evaluate(RiskContext)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext)"},{"p":"io.github.sahinemirhan.starter.rules","c":"IpVelocityRule","l":"evaluate(RiskContext)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext)"},{"p":"io.github.sahinemirhan.starter.rules","c":"NightTimeRule","l":"evaluate(RiskContext)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext)"},{"p":"io.github.sahinemirhan.starter.rules","c":"UserVelocityRule","l":"evaluate(RiskContext)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext)"},{"p":"io.github.sahinemirhan.starter.rules","c":"BruteForceRule","l":"evaluate(RiskContext, Map<String, String>)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext,java.util.Map)"},{"p":"io.github.sahinemirhan.starter.rules","c":"CredentialStuffingRule","l":"evaluate(RiskContext, Map<String, String>)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext,java.util.Map)"},{"p":"io.github.sahinemirhan.starter.rules","c":"IpVelocityRule","l":"evaluate(RiskContext, Map<String, String>)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext,java.util.Map)"},{"p":"io.github.sahinemirhan.starter.rules","c":"NightTimeRule","l":"evaluate(RiskContext, Map<String, String>)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext,java.util.Map)"},{"p":"io.github.sahinemirhan.starter.rules","c":"UserVelocityRule","l":"evaluate(RiskContext, Map<String, String>)","u":"evaluate(io.github.sahinemirhan.core.model.RiskContext,java.util.Map)"},{"p":"io.github.sahinemirhan.starter.rules","c":"HardRuleEvaluator","l":"evaluate(RiskResult)","u":"evaluate(io.github.sahinemirhan.core.model.RiskResult)"},{"p":"io.github.sahinemirhan.starter.annotation","c":"RiskCheck","l":"evaluateAfterSuccess()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"evaluateAfterSuccess()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"evaluateAfterSuccess()"},{"p":"io.github.sahinemirhan.starter.annotation","c":"RiskCheck","l":"evaluateBefore()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"evaluateBefore()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"evaluateBefore()"},{"p":"io.github.sahinemirhan.starter.annotation","c":"RiskCheck","l":"evaluateOnFailure()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"evaluateOnFailure()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"evaluateOnFailure()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"exception()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ExceptionThrowingBlockHandler","l":"ExceptionThrowingBlockHandler()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ExceptionThrowingChallengeHandler","l":"ExceptionThrowingChallengeHandler(ChallengeTelemetry)","u":"%3Cinit%3E(io.github.sahinemirhan.starter.challenge.ChallengeTelemetry)"},{"p":"io.github.sahinemirhan.starter.storage","c":"InMemoryRiskStorage","l":"expireKey(String, long)","u":"expireKey(java.lang.String,long)"},{"p":"io.github.sahinemirhan.starter.storage","c":"RedisRiskStorage","l":"expireKey(String, long)","u":"expireKey(java.lang.String,long)"},{"p":"io.github.sahinemirhan.starter.storage","c":"InMemoryRiskStorage","l":"expireKeyIfExists(String, long)","u":"expireKeyIfExists(java.lang.String,long)"},{"p":"io.github.sahinemirhan.starter.storage","c":"RedisRiskStorage","l":"expireKeyIfExists(String, long)","u":"expireKeyIfExists(java.lang.String,long)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver.Extractor","l":"extract(UserIdResolverContext)","u":"extract(io.github.sahinemirhan.starter.resolver.UserIdResolverContext)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver","l":"fromHeaders(String...)","u":"fromHeaders(java.lang.String...)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver","l":"fromPrincipal(Function<Principal, String>)","u":"fromPrincipal(java.util.function.Function)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver","l":"fromRequestAttributes(String...)","u":"fromRequestAttributes(java.lang.String...)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties.HardRuleConfig","l":"getAction()"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"getBlockThreshold()"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"getChallengeThreshold()"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"getChallengeTtl()"},{"p":"io.github.sahinemirhan.starter.storage","c":"InMemoryRiskStorage","l":"getDistinctSetSize(String)","u":"getDistinctSetSize(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.storage","c":"RedisRiskStorage","l":"getDistinctSetSize(String)","u":"getDistinctSetSize(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"NightTimeRuleProperties","l":"getEndHour()"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"getEscalationThreshold()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"getExcludedActions()"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"getHardRules()"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties.HardRuleConfig","l":"getMatch()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"CredentialStuffingRuleProperties","l":"getMaxDistinctUserCount()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"BruteForceRuleProperties","l":"getMaxFail()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"IpVelocityRuleProperties","l":"getMaxPerWindow()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"getMaxPerWindow()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver","l":"getOrder()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"PrincipalUserIdResolver","l":"getOrder()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"RequestAttributeUserIdResolver","l":"getOrder()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"RequestHeaderUserIdResolver","l":"getOrder()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"RiskUserIdResolver","l":"getOrder()"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"getPermanentBlockTtl()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"BruteForceRuleProperties","l":"getRiskScore()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"CredentialStuffingRuleProperties","l":"getRiskScore()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"IpVelocityRuleProperties","l":"getRiskScore()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"NightTimeRuleProperties","l":"getRiskScore()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"getRiskScore()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"NightTimeRuleProperties","l":"getStartHour()"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"getTemporaryBlockTtl()"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"getTimezone()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"BruteForceRuleProperties","l":"getWindowSeconds()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"CredentialStuffingRuleProperties","l":"getWindowSeconds()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"IpVelocityRuleProperties","l":"getWindowSeconds()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"getWindowSeconds()"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"getWindowStrategy()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockHandler","l":"handleBlock(BlockContext)","u":"handleBlock(io.github.sahinemirhan.starter.challenge.BlockContext)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ExceptionThrowingBlockHandler","l":"handleBlock(BlockContext)","u":"handleBlock(io.github.sahinemirhan.starter.challenge.BlockContext)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeHandler","l":"handleChallenge(ChallengeContext)","u":"handleChallenge(io.github.sahinemirhan.starter.challenge.ChallengeContext)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ExceptionThrowingChallengeHandler","l":"handleChallenge(ChallengeContext)","u":"handleChallenge(io.github.sahinemirhan.starter.challenge.ChallengeContext)"},{"p":"io.github.sahinemirhan.starter.aop","c":"RiskAspect","l":"handleRisk(ProceedingJoinPoint)","u":"handleRisk(org.aspectj.lang.ProceedingJoinPoint)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties.HardRuleConfig","l":"HardRuleConfig()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.rules","c":"HardRuleEvaluator","l":"HardRuleEvaluator(Map<String, SpriskProperties.HardRuleConfig>)","u":"%3Cinit%3E(java.util.Map)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"hardRuleEvaluator(SpriskProperties)","u":"hardRuleEvaluator(io.github.sahinemirhan.starter.config.SpriskProperties)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockContext","l":"hardRuleHit()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"hardRuleHit()"},{"p":"io.github.sahinemirhan.starter.rules","c":"HardRuleEvaluator.HardRuleHit","l":"HardRuleHit(String, Decision)","u":"%3Cinit%3E(java.lang.String,io.github.sahinemirhan.core.model.Decision)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"hashCode()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"hashCode()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockContext","l":"hashCode()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"hashCode()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeEvent","l":"hashCode()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"hashCode()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"UserIdResolverContext","l":"hashCode()"},{"p":"io.github.sahinemirhan.starter.rules","c":"HardRuleEvaluator.HardRuleHit","l":"hashCode()"},{"p":"io.github.sahinemirhan.starter.storage","c":"InMemoryRiskStorage","l":"InMemoryRiskStorage()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.rules","c":"IpVelocityRule","l":"IpVelocityRule(WindowManager, long, long, int, boolean)","u":"%3Cinit%3E(io.github.sahinemirhan.core.window.WindowManager,long,long,int,boolean)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"IpVelocityRuleProperties","l":"IpVelocityRuleProperties()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.storage","c":"InMemoryRiskStorage","l":"increment(String)","u":"increment(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.storage","c":"RedisRiskStorage","l":"increment(String)","u":"increment(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"inMemoryStorage()"},{"p":"io.github.sahinemirhan.starter.annotation","c":"RiskCheck","l":"ip()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"ipExpression()"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"ipVelocityRule(WindowManager, IpVelocityRuleProperties)","u":"ipVelocityRule(io.github.sahinemirhan.core.window.WindowManager,io.github.sahinemirhan.starter.config.rule.IpVelocityRuleProperties)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RuleOverrideSet","l":"isEmpty()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"BruteForceRuleProperties","l":"isEnabled()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"CredentialStuffingRuleProperties","l":"isEnabled()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"IpVelocityRuleProperties","l":"isEnabled()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"NightTimeRuleProperties","l":"isEnabled()"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"isEnabled()"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"isEnabled()"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"isFailClosed()"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"isPermanentBlockEnabled()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"UserIdResolverContext","l":"joinPoint()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RuleOverrideSet","l":"merge(RuleOverrideSet)","u":"merge(io.github.sahinemirhan.starter.aop.internal.RuleOverrideSet)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome","l":"message()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Builder","l":"message(String)","u":"message(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome","l":"metadata()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Builder","l":"metadata(Map<String, Object>)","u":"metadata(java.util.Map)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Builder","l":"metadata(String, Object)","u":"metadata(java.lang.String,java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"nightTimeRule(SpriskProperties, NightTimeRuleProperties)","u":"nightTimeRule(io.github.sahinemirhan.starter.config.SpriskProperties,io.github.sahinemirhan.starter.config.rule.NightTimeRuleProperties)"},{"p":"io.github.sahinemirhan.starter.rules","c":"NightTimeRule","l":"NightTimeRule(ZoneId, boolean, int, int, int)","u":"%3Cinit%3E(java.time.ZoneId,boolean,int,int,int)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"NightTimeRuleProperties","l":"NightTimeRuleProperties()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RuleOverrideSet","l":"of(Map<String, Boolean>, Map<String, Map<String, String>>)","u":"of(java.util.Map,java.util.Map)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcomeListener","l":"onChallengeOutcome(ChallengeOutcome, ChallengeContext)","u":"onChallengeOutcome(io.github.sahinemirhan.starter.challenge.ChallengeOutcome,io.github.sahinemirhan.starter.challenge.ChallengeContext)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver.Builder","l":"order(int)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"outcome()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"overrides()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"overrides()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RuleOverrideParser","l":"parse(String[])","u":"parse(java.lang.String[])"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome","l":"permanent()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Builder","l":"permanent(boolean)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"permanentBlockEnabled()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"permanentBlockTtl()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockContext","l":"policy()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"policy()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"PrincipalUserIdResolver","l":"PrincipalUserIdResolver()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution.Type","l":"PROCEED"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"proceed()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"proceed(ChallengeOutcome)","u":"proceed(io.github.sahinemirhan.starter.challenge.ChallengeOutcome)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RuleOverrideSet","l":"properties()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"PropertiesChallengePolicyStrategy","l":"PropertiesChallengePolicyStrategy(ChallengePolicyProperties)","u":"%3Cinit%3E(io.github.sahinemirhan.starter.config.ChallengePolicyProperties)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockContext","l":"reason()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"reason()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeTelemetry","l":"record(ChallengeContext)","u":"record(io.github.sahinemirhan.starter.challenge.ChallengeContext)"},{"p":"io.github.sahinemirhan.starter.storage","c":"RedisRiskStorage","l":"RedisRiskStorage(StringRedisTemplate)","u":"%3Cinit%3E(org.springframework.data.redis.core.StringRedisTemplate)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"redisStorage(StringRedisTemplate)","u":"redisStorage(org.springframework.data.redis.core.StringRedisTemplate)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"request()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockContext","l":"request()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"request()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"UserIdResolverContext","l":"request()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"RequestAttributeUserIdResolver","l":"RequestAttributeUserIdResolver()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"RequestHeaderUserIdResolver","l":"RequestHeaderUserIdResolver()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfigurationResolver","l":"resolve(ProceedingJoinPoint, RiskCheck, RiskCheck)","u":"resolve(org.aspectj.lang.ProceedingJoinPoint,io.github.sahinemirhan.starter.annotation.RiskCheck,io.github.sahinemirhan.starter.annotation.RiskCheck)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicyStrategy","l":"resolve(RiskResult, HardRuleEvaluator.HardRuleHit)","u":"resolve(io.github.sahinemirhan.core.model.RiskResult,io.github.sahinemirhan.starter.rules.HardRuleEvaluator.HardRuleHit)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"PropertiesChallengePolicyStrategy","l":"resolve(RiskResult, HardRuleEvaluator.HardRuleHit)","u":"resolve(io.github.sahinemirhan.core.model.RiskResult,io.github.sahinemirhan.starter.rules.HardRuleEvaluator.HardRuleHit)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"CompositeUserIdResolver","l":"resolve(UserIdResolverContext)","u":"resolve(io.github.sahinemirhan.starter.resolver.UserIdResolverContext)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"PrincipalUserIdResolver","l":"resolve(UserIdResolverContext)","u":"resolve(io.github.sahinemirhan.starter.resolver.UserIdResolverContext)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"RequestAttributeUserIdResolver","l":"resolve(UserIdResolverContext)","u":"resolve(io.github.sahinemirhan.starter.resolver.UserIdResolverContext)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"RequestHeaderUserIdResolver","l":"resolve(UserIdResolverContext)","u":"resolve(io.github.sahinemirhan.starter.resolver.UserIdResolverContext)"},{"p":"io.github.sahinemirhan.starter.resolver","c":"RiskUserIdResolver","l":"resolve(UserIdResolverContext)","u":"resolve(io.github.sahinemirhan.starter.resolver.UserIdResolverContext)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockContext","l":"result()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"result()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution.Type","l":"RETURN"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"returning(Object)","u":"returning(java.lang.Object)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"returning(Object, ChallengeOutcome)","u":"returning(java.lang.Object,io.github.sahinemirhan.starter.challenge.ChallengeOutcome)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"returnValue()"},{"p":"io.github.sahinemirhan.starter.aop","c":"RiskAspect","l":"riskAnnotated()"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"riskAspect(SpriskProperties, RiskConfigurationResolver, RiskInvocationFactory, RiskEvaluationProcessor, ObjectProvider<HttpServletRequest>)","u":"riskAspect(io.github.sahinemirhan.starter.config.SpriskProperties,io.github.sahinemirhan.starter.aop.internal.RiskConfigurationResolver,io.github.sahinemirhan.starter.aop.internal.RiskInvocationFactory,io.github.sahinemirhan.starter.aop.internal.RiskEvaluationProcessor,org.springframework.beans.factory.ObjectProvider)"},{"p":"io.github.sahinemirhan.starter.aop","c":"RiskAspect","l":"RiskAspect(SpriskProperties, RiskConfigurationResolver, RiskInvocationFactory, RiskEvaluationProcessor, ObjectProvider<HttpServletRequest>)","u":"%3Cinit%3E(io.github.sahinemirhan.starter.config.SpriskProperties,io.github.sahinemirhan.starter.aop.internal.RiskConfigurationResolver,io.github.sahinemirhan.starter.aop.internal.RiskInvocationFactory,io.github.sahinemirhan.starter.aop.internal.RiskEvaluationProcessor,org.springframework.beans.factory.ObjectProvider)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"RiskConfiguration(String, String, String, boolean, boolean, boolean, String[], RuleOverrideSet)","u":"%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,java.lang.String[],io.github.sahinemirhan.starter.aop.internal.RuleOverrideSet)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"riskConfigurationResolver(RuleOverrideParser)","u":"riskConfigurationResolver(io.github.sahinemirhan.starter.aop.internal.RuleOverrideParser)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfigurationResolver","l":"RiskConfigurationResolver(RuleOverrideParser)","u":"%3Cinit%3E(io.github.sahinemirhan.starter.aop.internal.RuleOverrideParser)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskEvaluationProcessor","l":"RiskEvaluationProcessor(RuleEngine, DecisionProfile, HardRuleEvaluator, ChallengeHandler, BlockHandler, ChallengePolicyStrategy, List<ChallengeOutcomeListener>)","u":"%3Cinit%3E(io.github.sahinemirhan.core.engine.RuleEngine,io.github.sahinemirhan.core.model.DecisionProfile,io.github.sahinemirhan.starter.rules.HardRuleEvaluator,io.github.sahinemirhan.starter.challenge.ChallengeHandler,io.github.sahinemirhan.starter.challenge.BlockHandler,io.github.sahinemirhan.starter.challenge.ChallengePolicyStrategy,java.util.List)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"riskEvaluationProcessor(RuleEngine, DecisionProfile, HardRuleEvaluator, ChallengeHandler, BlockHandler, ChallengePolicyStrategy, ObjectProvider<ChallengeOutcomeListener>)","u":"riskEvaluationProcessor(io.github.sahinemirhan.core.engine.RuleEngine,io.github.sahinemirhan.core.model.DecisionProfile,io.github.sahinemirhan.starter.rules.HardRuleEvaluator,io.github.sahinemirhan.starter.challenge.ChallengeHandler,io.github.sahinemirhan.starter.challenge.BlockHandler,io.github.sahinemirhan.starter.challenge.ChallengePolicyStrategy,org.springframework.beans.factory.ObjectProvider)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"RiskInvocation(Supplier<RiskContext>, RuleOverrideSet, boolean, boolean, boolean, HttpServletRequest)","u":"%3Cinit%3E(java.util.function.Supplier,io.github.sahinemirhan.starter.aop.internal.RuleOverrideSet,boolean,boolean,boolean,jakarta.servlet.http.HttpServletRequest)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"riskInvocationFactory(List<RiskUserIdResolver>)","u":"riskInvocationFactory(java.util.List)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocationFactory","l":"RiskInvocationFactory(ParameterNameDiscoverer, List<RiskUserIdResolver>)","u":"%3Cinit%3E(org.springframework.core.ParameterNameDiscoverer,java.util.List)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskAttributes","l":"RULE_ENABLED_OVERRIDES"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskAttributes","l":"RULE_FLAGS"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskAttributes","l":"RULE_FLAGS_STRING"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskAttributes","l":"RULE_OVERRIDES_LEGACY"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskAttributes","l":"RULE_PROPERTY_OVERRIDES"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"ruleEngine(List<RiskRule>)","u":"ruleEngine(java.util.List)"},{"p":"io.github.sahinemirhan.starter.rules","c":"HardRuleEvaluator.HardRuleHit","l":"ruleName()"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"ruleOverrideParser()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RuleOverrideParser","l":"RuleOverrideParser()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.annotation","c":"RiskCheck","l":"ruleProperties()"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties.HardRuleConfig","l":"setAction(Decision)","u":"setAction(io.github.sahinemirhan.core.model.Decision)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"setBlockThreshold(int)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"setChallengeThreshold(int)"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"setChallengeTtl(Duration)","u":"setChallengeTtl(java.time.Duration)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"BruteForceRuleProperties","l":"setEnabled(boolean)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"CredentialStuffingRuleProperties","l":"setEnabled(boolean)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"IpVelocityRuleProperties","l":"setEnabled(boolean)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"NightTimeRuleProperties","l":"setEnabled(boolean)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"setEnabled(boolean)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"setEnabled(boolean)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"NightTimeRuleProperties","l":"setEndHour(int)"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"setEscalationThreshold(int)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"setExcludedActions(Set<String>)","u":"setExcludedActions(java.util.Set)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"setFailClosed(boolean)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"setHardRules(Map<String, SpriskProperties.HardRuleConfig>)","u":"setHardRules(java.util.Map)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties.HardRuleConfig","l":"setMatch(Map<String, Boolean>)","u":"setMatch(java.util.Map)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"CredentialStuffingRuleProperties","l":"setMaxDistinctUserCount(long)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"BruteForceRuleProperties","l":"setMaxFail(long)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"IpVelocityRuleProperties","l":"setMaxPerWindow(long)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"setMaxPerWindow(long)"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"setPermanentBlockEnabled(boolean)"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"setPermanentBlockTtl(Duration)","u":"setPermanentBlockTtl(java.time.Duration)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"BruteForceRuleProperties","l":"setRiskScore(int)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"CredentialStuffingRuleProperties","l":"setRiskScore(int)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"IpVelocityRuleProperties","l":"setRiskScore(int)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"NightTimeRuleProperties","l":"setRiskScore(int)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"setRiskScore(int)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"NightTimeRuleProperties","l":"setStartHour(int)"},{"p":"io.github.sahinemirhan.starter.config","c":"ChallengePolicyProperties","l":"setTemporaryBlockTtl(Duration)","u":"setTemporaryBlockTtl(java.time.Duration)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"setTimezone(String)","u":"setTimezone(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"BruteForceRuleProperties","l":"setWindowSeconds(long)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"CredentialStuffingRuleProperties","l":"setWindowSeconds(long)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"IpVelocityRuleProperties","l":"setWindowSeconds(long)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"setWindowSeconds(long)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"setWindowStrategy(WindowStrategy)","u":"setWindowStrategy(io.github.sahinemirhan.core.window.WindowStrategy)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"SpriskAutoConfiguration()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.exception","c":"SpriskBlockedException","l":"SpriskBlockedException(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.exception","c":"SpriskChallengeException","l":"SpriskChallengeException(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.config","c":"SpriskProperties","l":"SpriskProperties()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome","l":"status()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"temporaryBlockTtl()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution.Type","l":"THROW"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"throwing(RuntimeException)","u":"throwing(java.lang.RuntimeException)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"throwing(RuntimeException, ChallengeOutcome)","u":"throwing(java.lang.RuntimeException,io.github.sahinemirhan.starter.challenge.ChallengeOutcome)"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"toString()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskInvocation","l":"toString()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"BlockContext","l":"toString()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeContext","l":"toString()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeEvent","l":"toString()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"toString()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"UserIdResolverContext","l":"toString()"},{"p":"io.github.sahinemirhan.starter.rules","c":"HardRuleEvaluator.HardRuleHit","l":"toString()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeEvent","l":"totalChallenges()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeTelemetry","l":"totalChallenges()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome","l":"ttl()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Builder","l":"ttl(Duration)","u":"ttl(java.time.Duration)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengePolicy","l":"ttlFor(ChallengeOutcome.Status)","u":"ttlFor(io.github.sahinemirhan.starter.challenge.ChallengeOutcome.Status)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution","l":"type()"},{"p":"io.github.sahinemirhan.starter.aop.internal","c":"RiskConfiguration","l":"userExpression()"},{"p":"io.github.sahinemirhan.starter.annotation","c":"RiskCheck","l":"userId()"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"userIdResolver()"},{"p":"io.github.sahinemirhan.starter.resolver","c":"UserIdResolverContext","l":"UserIdResolverContext(ProceedingJoinPoint, HttpServletRequest)","u":"%3Cinit%3E(org.aspectj.lang.ProceedingJoinPoint,jakarta.servlet.http.HttpServletRequest)"},{"p":"io.github.sahinemirhan.starter.rules","c":"UserVelocityRule","l":"UserVelocityRule(WindowManager, long, long, int, Set<String>, boolean)","u":"%3Cinit%3E(io.github.sahinemirhan.core.window.WindowManager,long,long,int,java.util.Set,boolean)"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"userVelocityRule(WindowManager, UserVelocityRuleProperties)","u":"userVelocityRule(io.github.sahinemirhan.core.window.WindowManager,io.github.sahinemirhan.starter.config.rule.UserVelocityRuleProperties)"},{"p":"io.github.sahinemirhan.starter.config.rule","c":"UserVelocityRuleProperties","l":"UserVelocityRuleProperties()","u":"%3Cinit%3E()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Status","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution.Type","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeOutcome.Status","l":"values()"},{"p":"io.github.sahinemirhan.starter.challenge","c":"ChallengeResolution.Type","l":"values()"},{"p":"io.github.sahinemirhan.starter.autoconfig","c":"SpriskAutoConfiguration","l":"windowManager(RiskStorage, SpriskProperties)","u":"windowManager(io.github.sahinemirhan.core.storage.RiskStorage,io.github.sahinemirhan.starter.config.SpriskProperties)"}];updateSearchResults();